<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ctf on foursight</title>
    <link>https://incub4t0r.github.io/categories/ctf/</link>
    <description>Recent content in ctf on foursight</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 13 Jun 2020 17:05:44 -0400</lastBuildDate><atom:link href="https://incub4t0r.github.io/categories/ctf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>All Your Base Are Belong To Us</title>
      <link>https://incub4t0r.github.io/posts/allyourbasebelongtous/</link>
      <pubDate>Sat, 13 Jun 2020 17:05:44 -0400</pubDate>
      
      <guid>https://incub4t0r.github.io/posts/allyourbasebelongtous/</guid>
      <description>This problem cost me 5 years of my life. It shouldn&amp;rsquo;t have been this hard, but here we go.
TL;DR When you netcat to the provided web address, you are given this output.
 This program is going to ask you to convert among 6 different bases a total of 5 times. Each question is placed inside of lines delimited by 78&#39;-&#39; characters. The first line of each question indicates the base we aregiving to you as well as the base we expect the result in and looks like:[src_base] -&amp;gt; [answer base]The next line of the question is the source text that we want you to convertinto the new base.</description>
    </item>
    
    <item>
      <title>Binex 101</title>
      <link>https://incub4t0r.github.io/posts/binex101/</link>
      <pubDate>Sun, 03 May 2020 17:05:44 -0400</pubDate>
      
      <guid>https://incub4t0r.github.io/posts/binex101/</guid>
      <description>Only a 50 point problem but I really enjoyed the concepts of C programming vulnerabilities and the math behind it.
TL;DR Source code outlined vulnerability of integer overflow, calculated numbers to put into program to return -1 and got flag.
Breaking it down As with any challenge, I started with reading the source code provided, which turned out to be a good idea and a good hint provided.
The source code given outlines the integer vulnerability of C programming, where once a stored integer passes a certain max value (2147483647), then the number will start to equal negative numbers.</description>
    </item>
    
    <item>
      <title>angstromCTF - Image Encryption</title>
      <link>https://incub4t0r.github.io/posts/angstromimageencryption/</link>
      <pubDate>Fri, 01 May 2020 17:05:44 -0400</pubDate>
      
      <guid>https://incub4t0r.github.io/posts/angstromimageencryption/</guid>
      <description>This was a fun one, it required me to annotate the source code and figure out a decryption method for the given picture.
TL;DR The file image-encryption.py is opening a target image file, in this case, img.png.
The program then creates an array of the pixels that the image contains, then parses through each pixel. Upon arriving at each pixel, the program then stores into a variable what is assumably the RGB values of each pixel.</description>
    </item>
    
    <item>
      <title>Binex at ShmooCon</title>
      <link>https://incub4t0r.github.io/posts/schmoocon_ret2systems/</link>
      <pubDate>Thu, 30 Apr 2020 17:05:44 -0400</pubDate>
      
      <guid>https://incub4t0r.github.io/posts/schmoocon_ret2systems/</guid>
      <description>At ShmooCon 2020, RET2 Systems was hosting a challenge where they had prototype waterbottles held within a laser system with alarms, run off of a Raspberry Pi. The goal was to access the Raspberry Pi, disable the lasers and alarms, all within their provided Wargames environment.
Provided with the disassembly, data, source, and python script to run an interactive response, you were left to your own devices to figure out a way to run</description>
    </item>
    
  </channel>
</rss>
