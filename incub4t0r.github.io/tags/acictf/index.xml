<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>acictf on foursight</title>
    <link>https://incub4t0r.github.io/tags/acictf/</link>
    <description>Recent content in acictf on foursight</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 13 Jun 2020 17:05:44 -0400</lastBuildDate><atom:link href="https://incub4t0r.github.io/tags/acictf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>All Your Base Are Belong To Us</title>
      <link>https://incub4t0r.github.io/posts/allyourbasebelongtous/</link>
      <pubDate>Sat, 13 Jun 2020 17:05:44 -0400</pubDate>
      
      <guid>https://incub4t0r.github.io/posts/allyourbasebelongtous/</guid>
      <description>This problem cost me 5 years of my life. It shouldn&amp;rsquo;t have been this hard, but here we go.
TL;DR When you netcat to the provided web address, you are given this output.
 This program is going to ask you to convert among 6 different bases a total of 5 times. Each question is placed inside of lines delimited by 78&#39;-&#39; characters. The first line of each question indicates the base we aregiving to you as well as the base we expect the result in and looks like:[src_base] -&amp;gt; [answer base]The next line of the question is the source text that we want you to convertinto the new base.</description>
    </item>
    
    <item>
      <title>Binex 101</title>
      <link>https://incub4t0r.github.io/posts/binex101/</link>
      <pubDate>Sun, 03 May 2020 17:05:44 -0400</pubDate>
      
      <guid>https://incub4t0r.github.io/posts/binex101/</guid>
      <description>Only a 50 point problem but I really enjoyed the concepts of C programming vulnerabilities and the math behind it.
TL;DR Source code outlined vulnerability of integer overflow, calculated numbers to put into program to return -1 and got flag.
Breaking it down As with any challenge, I started with reading the source code provided, which turned out to be a good idea and a good hint provided.
The source code given outlines the integer vulnerability of C programming, where once a stored integer passes a certain max value (2147483647), then the number will start to equal negative numbers.</description>
    </item>
    
  </channel>
</rss>
